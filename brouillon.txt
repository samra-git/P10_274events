*************************************DataContext*********************************
// import PropTypes from "prop-types";
// import {
//   createContext,
//   useCallback,
//   useContext,
//   useEffect,
//   useState,
// } from "react";

// const DataContext = createContext({});

// export const api = {
//   loadData: async () => {
//     const json = await fetch("/events.json");
//     return json.json();
//   },
// };

// export const DataProvider = ({ children }) => {
//   const [error, setError] = useState(null);
//   const [data, setData] = useState(null);
//   const [last, setLast] = useState(null);
//   const getData = useCallback(async () => {
//     try {
//       const loadedData = await api.loadData();
//       setData(loadedData);
//       const currentDate = new Date();
//       const lastEvent = loadedData.events
//         .filter(
//           (event) => new Date(event.date).getTime() < currentDate.getTime()
//         )
//         .sort(
//           (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()
//         )[0];
//       setLast(lastEvent);
//     } catch (err) {
//       setError(err);
//     }
//   }, []);
//   useEffect(() => {
//     if (data) return;
//     getData();
//   });

//   return (
//     <DataContext.Provider
//       // eslint-disable-next-line react/jsx-no-constructed-context-values
//       value={{
//         data,
//         error,
//         last,
//       }}
//     >
//       {children}
//     </DataContext.Provider>
//   );
// };

// DataProvider.propTypes = {
//   children: PropTypes.node.isRequired,
// };

// export const useData = () => useContext(DataContext);

// export default DataContext;



**************************************slider*************************************************

// import { useEffect, useState } from "react";
// import { useData } from "../../contexts/DataContext";
// import { getMonth } from "../../helpers/Date";

// import "./style.scss";

// const Slider = () => {
//   const { data } = useData();
//   const [index, setIndex] = useState(0);
//   const byDateDesc = data?.focus.sort((evtA, evtB) =>
//     new Date(evtA.date) < new Date(evtB.date) ? -1 : 1
//   );

//   const goToSlide = (radioIdx) => {
//     setIndex(radioIdx);
//   };

//   useEffect(() => {
//     const nextCard = setTimeout(
//       () => setIndex(index < byDateDesc.length - 1 ? index + 1 : 0),
//       5000
//     );
//     return () => clearTimeout(nextCard);
//   });

//   // besoin de generer une key au hasard :
//   const newId = () => Math.random();

//   return (
//     <div className="SlideCardList">
//       {byDateDesc?.map((event, idx) => (
//         <div
//           key={event.title}
//           className={`SlideCard SlideCard--${
//             index === idx ? "display" : "hide"
//           }`}
//         >
//           <img src={event.cover} alt="forum" />
//           <div className="SlideCard__descriptionContainer">
//             <div className="SlideCard__description">
//               <h3>{event.title}</h3>
//               <p>{event.description}</p>
//               <div>{getMonth(new Date(event.date))}</div>
//             </div>
//           </div>
//         </div>
//       ))}
//       <div className="SlideCard__paginationContainer">
//         <div className="SlideCard__pagination">
//           {byDateDesc?.map((evt, radioIdx) => (
//             <input
//               key={newId()}
//               type="radio"
//               name="radio-button"
//               checked={index === radioIdx}
//               onChange={() => goToSlide(radioIdx)}
//             />
//           ))}
//         </div>
//       </div>
//     </div>
//   );
// };

// export default Slider;



****************************slider/test***********************************

// import { render, screen } from "@testing-library/react";
// import Slider from "./index";
// import { api, DataProvider } from "../../contexts/DataContext";

// const data = {
//   focus: [
//     {
//       title: "World economic forum",
//       description:
//         "Oeuvre à la coopération entre le secteur public et le privé.",
//       date: "2022-02-29T20:28:45.744Z",
//       cover: "/images/evangeline-shaw-nwLTVwb7DbU-unsplash1.png",
//     },
//     {
//       title: "World Gaming Day",
//       description: "Evenement mondial autour du gaming",
//       date: "2022-03-29T20:28:45.744Z",
//       cover: "/images/evangeline-shaw-nwLTVwb7DbU-unsplash1.png",
//     },
//     {
//       title: "World Farming Day",
//       description: "Evenement mondial autour de la ferme",
//       date: "2022-01-29T20:28:45.744Z",
//       cover: "/images/evangeline-shaw-nwLTVwb7DbU-unsplash1.png",
//     },
//   ],
// };

// describe("When slider is created", () => {
//   it("a list card is displayed", async () => {
//     window.console.error = jest.fn();
//     api.loadData = jest.fn().mockReturnValue(data);
//     render(
//       <DataProvider>
//         <Slider />
//       </DataProvider>
//     );
//     await screen.findByText("World economic forum");
//     await screen.findByText("janvier");
//     await screen.findByText(
//       "Oeuvre à la coopération entre le secteur public et le privé."
//     );
//   });
// });





*****************************test formulaire d'envoi***********************
const Form = ({ onSuccess, onError }) => {
  const [sending, setSending] = useState(false);
  const [dataForm, setDataForm] = useState();

  const formFill = {
    nom: "",
    prenom: "",
    email: "",

  }
  const handleClick = () => {
    setDataForm(formFill)
  }
  const sendContact = useCallback(
    async (evt) => {
      evt.preventDefault();
        setSending(true);
      // We try to call mockContactApi
      try {
        if (!dataForm) {
            throw new Error("Veuillez saisir les champs")
        }
        const {nom, prenom, email } = dataForm;
        if (!nom || !prenom || !email) {
            throw new Error("Veuillez remplir tous les champs obligatoires du formulaire")
        }
        
        await mockContactApi();
        setSending(false);
        onSuccess(); // ajout pour afficher la modale du message
      } catch (err) {
        setSending(false);
        onError(err);
      } 
        
      

    },
    [dataForm, onSuccess, onError]
  );}